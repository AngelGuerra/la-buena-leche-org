---
layout: null
---
window.addEventListener("load", function () {
  window.cookieconsent.initialise({
    cookie: {
      domain: '.labuenaleche.org',
      secure: true
    },
    palette: {
      popup: {
        background: "#c17e93",
        text: "#ffffff"
      },
      button: {
        background: "transparent",
        text: "#ffffff",
        border: "#ffffff"
      }
    },
    revokable: true,
    dismissOnWindowClick: true,
    position: "bottom-right",
    type: "opt-in",
    content: {
      message: "Utilizamos de terceros para obtener datos estadísticos de la navegación de nuestros usuarios y mejorar nuestra web. Si aceptas o continúas navegando, consideramos que aceptas su uso.",
      dismiss: "Lo tengo",
      deny: "No acepto",
      allow: "Acepto",
      link: "Quiero saber más",
      href: "https://www.labuenaleche.org/politica-de-cookies",
      policy: "Política de cookies"
    },
    // This is called on start up, with the current chosen compliance. It can be used to tell you if the user has already consented or not as soon as you initialise the tool.
    onInitialise: function (status) {
      var type = this.options.type;
      var didConsent = this.hasConsented();

      if (type == 'opt-in' && didConsent) {
        enableCookies();
      }
    },
    // This is called any time the status is changed. This can be used to react to changes that are made to the compliance level. You can use the popup instance functions from within these callbacks too. I.E. ‘this.hasAnswered()’ and ‘this.hasConsented()’.
    onStatusChange: function (status, chosenBefore) {
      var type = this.options.type;
      var didConsent = this.hasConsented();
      if (type == 'opt-in' && didConsent) {
        enableCookies();
      }
    },
    // This is called when the user clicks the ‘revoke’ button. This means that their current choice has been invalidated.
    onRevokeChoice: function () {
      var type = this.options.type;

      if (type == 'opt-in') {
        disableCookies();
      }
    },
  })
});

/**
 * @author Ángel Guerra <a.guerrarevilla@gmail.com>
 *
 * Habilita las cookies del sitio o aquellos scripts que instalan cookies
 *
 * @returns void
 */
function enableCookies() {
  // Me aseguro de que el script no está cargado ya
  if (document.querySelectorAll('script[src="https://platform.twitter.com/widgets.js"]').length > 0) {
    return;
  }

  // Enable Analytics
  {% if jekyll.environment == "production" %}
    var script   = document.createElement('script');
    script.src   = 'https://www.googletagmanager.com/gtag/js?id={{site.gtag}}';
    script.async = true;
    document.head.appendChild(script);

    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', '{{site.gtag}}');
  {% endif %}

  // Enable Facebook
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = 'https://connect.facebook.net/es_ES/sdk.js#xfbml=1&version=v3.2';
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Enable Twitter
  var script     = document.createElement('script');
  script.src     = 'https://platform.twitter.com/widgets.js';
  script.charset = 'utf-8';
  script.async   = true;
  document.head.appendChild(script);
}

function disableCookies() {
  document.cookie.split(";").forEach(function(c) {
    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
  });
}
